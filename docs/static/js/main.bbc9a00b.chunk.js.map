{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","pokemons","setPokemons","perPage","setPerpage","currentPage","setCurrentPage","idShownImage","setIdShownImage","useEffect","fetchPokemons","e","offset","console","log","fetch","then","response","json","results","changePage","change","currentPageChange","showImage","id","className","type","onChange","target","value","placeholder","onClick","map","pkmn","i","key","src","alt","style","width","marginLeft","name","disabled","textAlign","length","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbc9a00b.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.min.css';\n\nfunction App() {\n\n    const [pokemons, setPokemons] = useState([]);\n    const [perPage, setPerpage] = useState(10);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [idShownImage, setIdShownImage] = useState(0);\n\n    useEffect(() => {\n      fetchPokemons();\n    }, []);\n\n    const fetchPokemons = e => {\n        var offset = (currentPage-1)*perPage;\n        console.log(`offset: ${offset}`);\n        console.log(`currentPage: ${currentPage}`);\n\n        console.log(`https://pokeapi.co/api/v2/pokemon/?offset=${offset}&limit=${perPage}`);\n        fetch(`https://pokeapi.co/api/v2/pokemon/?offset=${offset}&limit=${perPage}`)\n        .then(response => {\n          return response.json();\n        })\n        .then(response => setPokemons(response.results))\n    };\n \n    const changePage = (change) => {\n      // console.log(change);\n      if(currentPage+change>0){\n        let currentPageChange = currentPage + change;\n        console.log(`change: ${currentPage}+${change}`);\n        setCurrentPage(currentPageChange);\n        console.log(`=${currentPage}`);\n        console.log(`=${currentPageChange}`);\n        fetchPokemons();\n      }\n    };\n\n    const showImage = (id=0) => {\n      setIdShownImage(id);\n    };\n\n    return (\n      <div className=\"container \">\n        <div className=\"notification\">\n\n        <div className=\"columns\">\n\n          <div className=\"column\">\n            <label>Per Page</label>\n            <div className=\"field\">\n            <div className=\"control\">\n              <input className=\"input is-primary\" type=\"number\" onChange={e=>setPerpage(e.target.value)} value={perPage} placeholder=\"Per Page\"/>\n            </div>\n          </div>\n          </div>\n\n          <div className=\"column\">\n            <label>Current Page</label>\n            <div className=\"field\">\n            <div className=\"control\">\n              <input className=\"input is-primary\" type=\"number\" onChange={e=>setCurrentPage(e.target.value)} value={currentPage} placeholder=\"Current Page\"/>\n            </div>\n          </div>\n          </div>\n\n          <div className=\"column\">\n            <button onClick={fetchPokemons} className=\"button is-primary\">Fetch Pokemon</button>\n          </div>\n\n        </div>\n\n        </div>\n\n\n        <article className=\"panel is-primary\">\n          <p className=\"panel-heading\">\n            Pokemons\n          </p>\n          {\n              pokemons.map((pkmn,i) => \n                <a key={i} className=\"panel-block is-active\" onClick={e=>showImage((currentPage-1)*perPage+i+1)} >\n                  <img src={`https://pokeres.bastionbot.org/images/pokemon/${(currentPage-1)*perPage+i+1}.png`} alt=\"\" style={{ width:\"50px\"}}/>\n                <span style={{marginLeft:\"20px\"}}>{ pkmn.name }</span>\n              </a>\n              )\n          }\n          <div className=\"notification\">\n            <div className=\"columns\">\n              <div className=\"column\">\n              <button disabled={currentPage===1?'disabled':''} onClick={e=>changePage(-1)} className=\"button is-info\">Prevois</button>\n              </div>\n              <div className=\"column \" style={{textAlign:\"right\"}}>\n              <button disabled={pokemons.length<perPage?'disabled':''} onClick={e=>changePage(1)} className=\"button is-info\">Next</button>\n              </div>\n            </div>\n          </div>\n          \n\n        </article>\n\n\n        const [idShownImage, setIdShownImage] = useState(0);\n\n\n        <div className={idShownImage===0?'modal':'modal is-active'}>\n          <div className=\"modal-background\" onClick={e=>showImage(0)}></div>\n          <div className=\"modal-content\">\n            <p className=\"image is-4by3\">\n              {\n                (idShownImage>0)?\n                  <img src={`https://pokeres.bastionbot.org/images/pokemon/${(idShownImage)}.png`} alt=\"\"/>\n                  : ''\n              }\n              \n            </p>\n          </div>\n          <button onClick={e=>showImage(0)} className=\"modal-close is-large\" aria-label=\"close\"></button>\n        </div>\n\n          somehow, paging is working not correctly. but it works\n\n\n            {/* {people.length > 0 && people.map((person, index)=>{\n                return (<div key={index}>{person.name}</div>)\n            })} */}\n\n\n\n      </div>\n\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}